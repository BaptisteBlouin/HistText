searchState.loadedDescShard("HistTextWeb", 0, "Application entry point and module structure.\nApplication configuration management.\nCore text processing modules\nApplication entry point\nOpenAPI specification generation.\nServer implementation for the application.\nGlobal static configuration loaded at application startup\nApplication configuration loaded from environment variables\nErrors that can occur during configuration loading\nRequired environment variable is missing\nFailed to parse environment variable value\nBase URL for the application\nCreates an Actix-Web compatible Data wrapper for the …\nDatabase connection string\nWhether to enable OpenAPI documentation\nDefault path to word embedding files\nList of field name patterns to exclude from display\nList of field names to exclude from display\nList of field types to exclude from display\nSuffix to exclude for request names\nPrefix to exclude for request names\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets the global configuration instance\nGoogle OAuth client ID\nGoogle OAuth client secret\nSuffix for ID fields\nPrefix for ID fields\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLoads application configuration from environment variables\nField name for main date value\nMaximum size for document uploads in megabytes\nMaximum number of embedding files to keep in cache\nMaximum number of document IDs to process for NER\nMaximum number of values to display in metadata selection\nMaximum size for query JSON payloads in megabytes\nMaximum document size in bytes\nMaximum number of documents to return in queries\nFile path for NER cache\nUsername for OpenAPI basic auth\nPassword for OpenAPI basic auth\nDirectory path for storing temporary files\nSecret key for token signing and password hashing\nPort for the named entity recognition Solr service\nFile path for statistics cache\nEmpty mutation\nEmpty subscription\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nEmpty mutation\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nEmpty subscription\nDocument retrieval and transformation This module provides …\nWord embedding and semantic similarity This module …\nCollection metadata and schema information This module …\nNamed Entity Recognition processing This module provides …\nStatistical analysis of document collections This module …\nText tokenization and processing Text tokenization …\nQuery parameters for Solr collection requests.\nAdjusts a byte index downwards to the nearest valid UTF-8 …\nTarget Solr collection name\nActix-Web handler serving a generated CSV file from disk …\nReturn only download link instead of full results\nReturns a minimal Solr-style JSON response with no …\nExtracts a substring of length <code>context_len</code> around a match, …\nFetches documents from a Solr instance with optional term …\nDelegates to the <code>histtext::metadata</code> service to obtain …\nScans a haystack string for all occurrences of a needle, …\nReturns the argument unchanged.\nWhether to include named entity recognition data\nRetrieves a <code>SolrDatabase</code> record by its ID from the Diesel …\nGathers document IDs for NER processing if requested, …\nOrchestrates <code>fetch_documents</code>, measures response size, and …\nCalls <code>U::from(self)</code>.\nReturn raw Solr response without highlighting\nLogs the elapsed time since a given <code>Instant</code> with a custom …\nInitializes a CSV writer, determines headers from a batch …\nSolr query string (e.g. “title:rust”)\nActix-Web handler that enforces JWT-based permission …\nNumber of rows per page\nID of the Solr database configuration\nPagination offset\nStatistics level (e.g. “All”)\nAsynchronously writes JSON data to a file path for caching …\nStreams document values into the CSV writer under the …\nMutex for cache operations that need to be atomic\nCache entry for tracking embedding usage for LRU eviction\nCache statistics for monitoring and debugging\nMain cache keyed by collection identifier: “…\nRepresentation of a word’s embedding vector with …\nType alias for mapping words to their embedding vectors\nRequest parameters for finding semantically similar words\nResponse containing semantically similar words\nPath cache keyed by normalized file path (basename)\nDetails about a single path cache entry\nType alias for thread-safe shared embedding maps\nClears all embedding caches\nNumber of collection-specific embedding caches\nCollection name in Solr\nActix-Web handler for computing nearest neighbors for a …\nComputes the top-N most similar words by cosine similarity\nComputes the cosine similarity between two vectors\nEvicts the least recently used embedding file if needed\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns detailed cache statistics\nRetrieves the cached embeddings for a given collection\nRetrieves embedding path for a given solr_database_id and …\nWhether embeddings exist for the collection\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLast access time\nLoads embeddings from a file path if not already in the …\nLoads embeddings from a text file\nMaximum number of embedding files allowed in cache\nPrecomputed L2 norm for faster similarity calculations\nNormalizes a file path to just the basename for cache key …\nPath to embedding file\nDetailed information about each path cache entry\nNumber of file path-based embedding caches\nNumber of words in the embedding file\nID of the Solr database configuration\nList of semantically similar words, sorted by similarity\nTotal number of word embeddings loaded\nThe embedding vector components\nWord to find neighbors for\nCache for storing binary annotation data\nQuery parameters for database-level metadata requests\nCache for storing index data keyed by collection identifier\nQuery parameters for collection-specific metadata requests\nTarget Solr collection name\nRetrieves and filters Solr schema fields for a collection\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves collection aliases accessible to the …\nRetrieves field metadata for a specific Solr collection\nRetrieves minimum and maximum dates containing documents …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nID of the Solr database configuration\nID of the Solr database configuration\nCache for storing binary annotation data\nCache for storing index data by collection\nQuery parameters for NER data requests\nExtracts a document ID from a Solr document\nRetrieves named entity annotations for documents\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nProcesses document IDs in batches to retrieve entity …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nPath to cached NER payload file\nAccumulates statistics during document processing\nCache configuration structure from disk\nDashboard statistics for the application\nQuery parameters for statistics requests\nNumber of currently active collections\nCombined text from all documents\nConverts the accumulated statistics into a …\nComputes statistical analysis for a corpus of documents\nArray of document objects\nDistribution of documents by year\nDetects if the document corpus is in a CJK language\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nMerges another accumulator’s data into this one\nDistribution of values within metadata fields\nBigram frequency counts\nTrigram frequency counts\nPath to cached statistics data\nProcesses documents to extract statistics\nReads a cache file containing document data and …\nFields considered relevant for metadata statistics\nLevel of statistics to compute (None, Partial, All)\nText fields for language processing\nTotal number of collections\nTotal number of documents in the system\nTotal number of results in the query\nTotal number of registered users\nWord frequency counts\nJieba segmenter for CJK text\nRegex for removing punctuation and non-alphanumeric …\nRequest parameters for tokenization\nResponse containing tokenized words\nWhether to filter tokens for word cloud use\nChecks if text contains any CJK ideographs\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nDetermines if text should be processed as Latin script\nText to tokenize\nHTTP endpoint for tokenizing text\nTokenizes text with language-appropriate segmentation\nTokenized words\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0-based index\nPaginates through the table where page is a 0-based index …\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\n0-based index\nPaginates through the table where page is a 0-based index …\nHistText Core API documentation\nSecurity scheme modifier for OpenAPI documentation\nSolr Administration API documentation\nUser Management API documentation\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nAdds Bearer JWT security scheme to OpenAPI specification\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nHelper type for representing a boxed query from this table\nThe SQL type of all of the columns on this table\nA tuple of all of the columns on this table\nContains all of the columns of this table\nThe distinct clause of the query\nRe-exports all of the columns of this table, as well as the\nReturns the argument unchanged.\nThe from clause of the query\nThe group by clause of the query\nThe having clause of the query\nCalls <code>U::from(self)</code>.\nThe combined limit/offset clause of the query\nThe order clause of the query\nThe select clause of the query\nRepresents <code>table_name.*</code>, which is sometimes necessary for …\nThe actual table struct\nThe where clause of the query\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRepresents <code>table_name.*</code>, which is sometimes needed for …\nApplication error handling and conversion to HTTP …\nAuthentication and authorization guards for route handlers.\nApplication route configuration and endpoint registration.\nRuns the HTTP server with all necessary components …\nSSH tunneling functionality for Solr database connections.\nServer startup procedures and initialization tasks.\nApplication state and shared resources.\nApplication-specific error types that can be converted to …\nInvalid request errors\nConfiguration errors\nDatabase-related errors\nExternal service or dependency errors\nResource not found errors\nSSH connection and command errors\nAuthentication and authorization errors\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nGuards a route to require admin permission in the JWT …\nValidates basic authentication credentials for OpenAPI …\nConfigure authentication routes\nConfigure health check endpoint\nConfigure HistText-specific text processing routes\nConfigure role permission management routes\nSets up all API routes for the application\nConfigure Solr database information routes\nConfigure Solr database permission routes\nConfigure Solr database management routes\nConfigure Solr query and metadata routes\nConfigure application statistics routes\nConfigure user permission assignment routes\nConfigure user role assignment routes\nConfigure user management routes\nAPI handler for connecting a specific Solr database via SSH\nConnects to a specific Solr database via SSH\nCreates an SSH tunnel for a single Solr database\nEstablishes SSH tunnels for all configured Solr databases\nVerifies and prepares embeddings for all configured …\nApplication shared state structure\nDatabase connection pool type for PostgreSQL connections\nApplication configuration\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nSSH child processes for database tunnels\nCommon CRUD operation helpers and error handling utilities.\nDatabase connection pool management.\nRole and permission mapping management.\nSolr database configuration management.\nSolr collection metadata management.\nSolr collection permission management.\nApplication statistics and metrics.\nDirect user permission management.\nUser role assignment management.\nUser account management with secure password handling.\nConnection pool or transaction errors\nCustom error type for CRUD operations\nDatabase-related errors from Diesel ORM\nResource not found errors\nInput validation errors\nExecutes a database query with proper logging and error …\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nLogged connection type returned to application code\nDatabase access wrapper\nRaw PostgreSQL connection type from Diesel\nDiesel backend type for PostgreSQL\nConnection pool type for PostgreSQL\nOptional reference to application configuration\nGets the database connection URL from environment variables\nReturns the argument unchanged.\nGets a logged connection from the pool\nInitializes or returns the global connection pool\nInitializes or returns the global connection pool with a …\nCalls <code>U::from(self)</code>.\nCreates a new <code>Database</code> instance with the default …\nReference to the global connection pool\nCreates a new <code>Database</code> instance with a specific …\nData needed to create a new role permission mapping\nRole permission record from the database\nHandler for role permission operations\nApplication configuration\nCreates a new role permission mapping\nCreates a new role-permission mapping\nWhen this role-permission mapping was created\nDeletes a role permission mapping\nDeletes a role-permission mapping\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves a specific role permission by its composite key\nRetrieves a specific role-permission mapping\nRetrieves all role-permission mappings\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nRetrieves all role permissions from the database\nCreates a new handler with the provided configuration\nPermission identifier (e.g., “read”, “write”)\nPermission to be granted to the role\nRole identifier (e.g., “admin”, “editor”)\nRole identifier to be granted a permission\nValidates a new role permission record\nData for creating a new Solr database configuration\nSolr database configuration record\nHandler for Solr database configuration operations\nData for updating an existing Solr database configuration\nApplication configuration\nCreates a new Solr database configuration\nCreates a new Solr database configuration\nWhen this configuration was created\nDeletes a Solr database configuration\nDeletes a Solr database configuration\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a specific Solr database configuration by ID\nRetrieves a specific Solr database configuration\nRetrieves all Solr database configurations\nUnique identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all Solr database configurations\nLocal port to map the SSH tunnel\nLocal port to map the SSH tunnel\nUpdated local port\nHuman-readable name for this Solr instance\nHuman-readable name for this Solr instance\nUpdated name\nCreates a new handler with the provided configuration\nRemote port where Solr is running\nRemote port where Solr is running\nUpdated server port\nUpdates an existing Solr database configuration\nUpdates an existing Solr database configuration\nWhen this configuration was last updated\nSSH connection URL or hostname\nSSH connection URL or hostname\nUpdated URL\nValidates a new Solr database configuration\nValidates updates to a Solr database configuration\nData for creating a new Solr collection metadata record\nSolr collection metadata record\nHandler for Solr collection metadata operations\nData for updating an existing Solr collection metadata …\nName of the Solr collection\nName of the Solr collection\nApplication configuration\nCreates a new collection metadata record\nCreates a new Solr collection metadata record\nDeletes a collection metadata record\nDeletes a Solr collection metadata record\nHuman-readable description of the collection\nHuman-readable description of the collection\nUpdated description\nPath to word embedding file or “default”/“none”\nPath to word embedding file or “default”/“none”\nUpdated embedding path\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a specific collection metadata record by its …\nRetrieves a specific Solr collection metadata record\nRetrieves all Solr collection metadata records\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLanguage code for the collection (e.g. “en”, “fr”)\nLanguage code for the collection\nUpdated language code\nLists all collection metadata records\nCreates a new handler with the provided configuration\nID of the parent Solr database\nID of the parent Solr database\nPrimary text field for searching and analysis\nPrimary text field for searching and analysis\nUpdated text field\nFields to exclude from display in UI\nFields to exclude from display in UI\nUpdated list of fields to exclude from display\nTokenizer to use (e.g. “standard”, “whitespace”)\nTokenizer to use\nUpdated tokenizer setting\nUpdates an existing collection metadata record\nUpdates an existing Solr collection metadata record\nValidates a new collection metadata record\nValidates updates to a collection metadata record\nData for creating a new Solr database permission\nSolr database permission record\nHandler for Solr database permission operations\nName of the Solr collection\nName of the Solr collection\nApplication configuration\nCreates a new Solr database permission record\nCreates a new Solr collection permission requirement\nDeletes a Solr database permission record by its composite …\nDeletes a Solr collection permission requirement\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a specific Solr database permission record by its …\nRetrieves a specific Solr collection permission requirement\nRetrieves all Solr collection permission requirements\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all Solr database permission records\nCreates a new handler with the provided configuration\nPermission required to access this collection\nPermission required to access this collection\nID of the parent Solr database\nID of the parent Solr database\nValidates a new Solr database permission record\nDashboard statistics model\nHandler for statistics operations\nNumber of activated user accounts\nClears all embedding caches\nApplication configuration\nNumber of collections with cached embeddings\nNumber of embedding files currently loaded in memory\nTotal number of words loaded in embedding cache\nReturns the argument unchanged.\nReturns the argument unchanged.\nRetrieves application dashboard statistics\nRetrieves comprehensive dashboard statistics\nRetrieves detailed embedding cache statistics\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCreates a new handler with the provided configuration\nNumber of Solr collections configured\nNumber of distinct permissions in the system\nNumber of distinct roles in the system\nTotal number of user accounts (active and inactive)\nData for creating a new user permission assignment\nUser permission assignment record\nHandler for user permission operations\nApplication configuration\nCreates a new user permission assignment\nCreates a new direct user permission assignment\nWhen this permission was granted\nDeletes a user permission assignment\nDeletes a direct user permission assignment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a specific user permission assignment\nRetrieves a specific user permission assignment\nRetrieves all direct user permission assignments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all user permission assignments\nCreates a new handler with the provided configuration\nPermission being granted\nPermission to grant\nID of the user receiving the permission\nID of the user to grant permission to\nValidates a new user permission assignment\nData for creating a new user role assignment\nUser role assignment record\nHandler for user role operations\nApplication configuration\nCreates a new user role assignment\nCreates a new user role assignment\nWhen this role was assigned\nDeletes a user role assignment\nDeletes a user role assignment\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGets a specific user role assignment\nRetrieves a specific user role assignment\nRetrieves all user role assignments\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nLists all user role assignments\nCreates a new handler with the provided configuration\nRole being assigned\nRole to assign\nID of the user receiving the role\nID of the user to assign the role to\nValidates a new user role assignment\nData for creating a new user account\nData for updating an existing user account\nUser account record\nHandler for user account operations\nWhether the account is active\nWhether the account should be initially active\nNew account activation status\nApplication configuration (contains security settings)\nCreates a new user account\nCreates a new user account\nWhen the account was created\nDeletes a user account\nDeletes a user account\nEmail address (used for login)\nEmail address (used for login)\nNew email address\nUser’s first name\nUser’s first name\nNew first name\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nGenerates a cryptographically secure random salt for …\nCreates an Argon2 configuration with application secret\nGets a specific user account by ID\nRetrieves a specific user account\nRetrieves all user accounts\nHashes a password using Argon2id with a random salt\nPassword hash using Argon2id\nPlain-text password (will be hashed)\nNew plain-text password (will be hashed)\nUnique identifier\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nUser’s last name\nUser’s last name\nNew last name\nLists all user accounts\nCreates a new handler with the provided configuration\nUpdates an existing user account\nUpdates an existing user account\nWhen the account was last updated\nValidates a new user account\nValidates user account updates")