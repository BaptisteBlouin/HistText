{"openapi":"3.0.3","info":{"title":"User Management API","description":"API endpoints for managing users, roles, and permissions","contact":{"name":"HistText Support","email":"support@histtext.example.com"},"license":{"name":""},"version":"1.0.0"},"paths":{"/api/role_permissions":{"get":{"tags":["RolePermissions"],"summary":"Retrieves all role-permission mappings","description":"Returns a list of all mappings that define which permissions\nare granted to specific roles. These mappings determine what\nrights users will automatically receive when assigned a role.\n\n# Arguments\n* `db` - Database connection pool\n* `config` - Application configuration\n\n# Returns\nHTTP response with JSON array of role-permission entries","operationId":"get_role_permissions","responses":{"200":{"description":"List of all role-permission mappings in the system","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/RolePermission"}}}}},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"post":{"tags":["RolePermissions"],"summary":"Creates a new role-permission mapping","description":"Grants the specified permission to all users who have the given role.\nValidates that identifiers are properly formatted before insertion.\n\n# Arguments\n* `db` - Database connection pool\n* `item` - JSON payload containing new role and permission\n* `config` - Application configuration\n\n# Returns\nHTTP response with the created mapping or validation error","operationId":"create_role_permission","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewRolePermission"}}},"required":true},"responses":{"201":{"description":"Role-permission mapping created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePermission"}}}},"400":{"description":"Validation error: role or permission identifiers invalid or exceed length limits"},"500":{"description":"Database connection error, constraint violation, or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/role_permissions/{role}/{permission}":{"get":{"tags":["RolePermissions"],"summary":"Retrieves a specific role-permission mapping","description":"Looks up a role-permission mapping by its composite primary key.\nUsed to verify whether a particular permission is assigned to a role.\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing role and permission identifiers\n* `config` - Application configuration\n\n# Returns\nHTTP response with the matching role-permission record or not-found error","operationId":"get_role_permission_by_role_and_permission","parameters":[{"name":"role","in":"path","required":true,"schema":{"type":"string"},"example":"admin"},{"name":"permission","in":"path","required":true,"schema":{"type":"string"},"example":"read"}],"responses":{"200":{"description":"Role-permission mapping found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/RolePermission"}}}},"404":{"description":"No mapping exists for the specified role and permission combination"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"delete":{"tags":["RolePermissions"],"summary":"Deletes a role-permission mapping","description":"Revokes the specified permission from the given role.\nThis affects all users who have the role, unless they have\nthe permission assigned directly or through another role.\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing role and permission identifiers\n* `config` - Application configuration\n\n# Returns\nHTTP response with success message or not-found error","operationId":"delete_role_permission","parameters":[{"name":"role","in":"path","required":true,"schema":{"type":"string"},"example":"admin"},{"name":"permission","in":"path","required":true,"schema":{"type":"string"},"example":"read"}],"responses":{"200":{"description":"Role-permission mapping successfully deleted"},"404":{"description":"No mapping exists for the specified role and permission combination"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/user_permissions":{"get":{"tags":["UserPermissions"],"summary":"Retrieves all direct user permission assignments","description":"Lists all permissions directly assigned to users, bypassing\nthe role-based permission system. This endpoint is useful for\nauditing special permission grants.\n\n# Arguments\n* `db` - Database connection pool\n* `config` - Application configuration\n\n# Returns\nHTTP response with all user permission assignments as JSON","operationId":"get_user_permissions","responses":{"200":{"description":"List of direct user-to-permission assignments","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserPermission"}}}}},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"post":{"tags":["UserPermissions"],"summary":"Creates a new direct user permission assignment","description":"Grants a specific permission directly to a user, bypassing the\nrole-based permission system. This allows for fine-grained access\ncontrol and special exceptions to normal role assignments.\n\n# Arguments\n* `db` - Database connection pool\n* `item` - JSON payload with user ID and permission to grant\n* `config` - Application configuration\n\n# Returns\nHTTP response with the created permission assignment or validation error","operationId":"create_user_permission","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewUserPermission"}}},"required":true},"responses":{"201":{"description":"Direct user permission assignment created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPermission"}}}},"400":{"description":"Validation error: invalid user_id or permission format"},"500":{"description":"Database connection error, constraint violation, or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/user_permissions/{user_id}/{permission}":{"get":{"tags":["UserPermissions"],"summary":"Retrieves a specific user permission assignment","description":"Checks if a user has been directly granted a specific permission,\nindependent of their role assignments.\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing user ID and permission\n* `config` - Application configuration\n\n# Returns\nHTTP response with the user permission assignment or not-found error","operationId":"get_user_permission_by_user_id_and_permission","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1},{"name":"permission","in":"path","required":true,"schema":{"type":"string"},"example":"read"}],"responses":{"200":{"description":"Direct user permission assignment found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserPermission"}}}},"404":{"description":"No direct permission assignment found for this user and permission"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"delete":{"tags":["UserPermissions"],"summary":"Deletes a direct user permission assignment","description":"Removes a specific permission that was directly granted to a user.\nThis does not affect permissions the user may have through roles.\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing user ID and permission\n* `config` - Application configuration\n\n# Returns\nHTTP response with success message or not-found error","operationId":"delete_user_permission","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1},{"name":"permission","in":"path","required":true,"schema":{"type":"string"},"example":"read"}],"responses":{"200":{"description":"Direct user permission assignment deleted successfully"},"404":{"description":"No direct permission assignment found for this user and permission"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/user_roles":{"get":{"tags":["UserRoles"],"summary":"Retrieves all user role assignments","description":"Lists all roles assigned to users in the system. This information\nis useful for role auditing and user permission management.\n\n# Arguments\n* `db` - Database connection pool\n* `config` - Application configuration\n\n# Returns\nHTTP response with all user role assignments as JSON","operationId":"get_user_roles","responses":{"200":{"description":"List of all user-role assignments in the system","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/UserRole"}}}}},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"post":{"tags":["UserRoles"],"summary":"Creates a new user role assignment","description":"Assigns a specific role to a user, granting them all permissions\nassociated with that role. This is the primary way to give users\naccess to system functionality through role-based access control.\n\n# Arguments\n* `db` - Database connection pool\n* `item` - JSON payload with user ID and role to assign\n* `config` - Application configuration\n\n# Returns\nHTTP response with the created role assignment or validation error","operationId":"create_user_role","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewUserRole"}}},"required":true},"responses":{"201":{"description":"User-role assignment created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRole"}}}},"400":{"description":"Validation error: invalid user_id or role format"},"500":{"description":"Database connection error, constraint violation, or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/user_roles/{user_id}/{role}":{"get":{"tags":["UserRoles"],"summary":"Retrieves a specific user role assignment","description":"Checks if a specific user has been assigned a particular role.\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing user ID and role\n* `config` - Application configuration\n\n# Returns\nHTTP response with the user role assignment or not-found error","operationId":"get_user_role_by_user_id_and_role","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1},{"name":"role","in":"path","required":true,"schema":{"type":"string"},"example":"admin"}],"responses":{"200":{"description":"User-role assignment found","content":{"application/json":{"schema":{"$ref":"#/components/schemas/UserRole"}}}},"404":{"description":"No assignment found for this user and role"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"delete":{"tags":["UserRoles"],"summary":"Deletes a user role assignment","description":"Removes a role from a user, revoking all permissions granted\nthrough that role (unless the user has those permissions through\nother roles or direct permission assignments).\n\n# Arguments\n* `db` - Database connection pool\n* `path` - Path parameters containing user ID and role\n* `config` - Application configuration\n\n# Returns\nHTTP response with success message or not-found error","operationId":"delete_user_role","parameters":[{"name":"user_id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1},{"name":"role","in":"path","required":true,"schema":{"type":"string"},"example":"admin"}],"responses":{"200":{"description":"User-role assignment deleted successfully"},"404":{"description":"No assignment found for this user and role"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]}},"/api/users":{"get":{"tags":["Users"],"summary":"Retrieves all user accounts","description":"Lists all user accounts with their profile information.\nNote: In production systems, consider filtering out password hashes\nbefore returning this data to clients.\n\n# Arguments\n* `db` - Database connection pool\n* `config` - Application configuration\n\n# Returns\nHTTP response with all user accounts as JSON","operationId":"get_users","responses":{"200":{"description":"List of all user accounts with profile information","content":{"application/json":{"schema":{"type":"array","items":{"$ref":"#/components/schemas/User"}}}}},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"post":{"tags":["Users"],"summary":"Creates a new user account","description":"Validates input data, securely hashes the password using Argon2id,\nand stores the new user account in the database.\n\n# Arguments\n* `db` - Database connection pool\n* `item` - JSON payload with new user details including plaintext password\n* `config` - Application configuration with security settings\n\n# Returns\nHTTP response with the created user account or validation error","operationId":"create_user","requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/NewUser"}}},"required":true},"responses":{"201":{"description":"User account created successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"Validation error: invalid email format, password too short, or name length constraints"},"500":{"description":"Database connection error, constraint violation, or password hashing failure"}},"security":[{"bearer_auth":[]}]}},"/api/users/{id}":{"get":{"tags":["Users"],"summary":"Retrieves a specific user account","description":"Gets detailed information about a single user account\nidentified by its unique ID.\n\n# Arguments\n* `db` - Database connection pool\n* `user_id` - Path parameter containing the user ID\n* `config` - Application configuration\n\n# Returns\nHTTP response with the requested user account or not-found error","operationId":"get_user_by_id","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1}],"responses":{"200":{"description":"User account found and returned","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"404":{"description":"No user found with the specified ID"},"500":{"description":"Database connection error or query execution failure"}},"security":[{"bearer_auth":[]}]},"put":{"tags":["Users"],"summary":"Updates an existing user account","description":"Supports partial updates with optional fields and securely\nrehashes password if a new one is provided. Can be used for\nchanging email, password, profile information, or account status.\n\n# Arguments\n* `db` - Database connection pool\n* `user_id` - Path parameter containing the user ID\n* `item` - JSON payload with fields to update\n* `config` - Application configuration with security settings\n\n# Returns\nHTTP response with the updated user account or appropriate error","operationId":"update_user","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1}],"requestBody":{"content":{"application/json":{"schema":{"$ref":"#/components/schemas/UpdateUser"}}},"required":true},"responses":{"200":{"description":"User account updated successfully","content":{"application/json":{"schema":{"$ref":"#/components/schemas/User"}}}},"400":{"description":"Validation error: invalid field formats or constraints"},"404":{"description":"No user found with the specified ID"},"500":{"description":"Database connection error, constraint violation, or password hashing failure"}},"security":[{"bearer_auth":[]}]},"delete":{"tags":["Users"],"summary":"Deletes a user account","description":"Permanently removes a user account from the system.\nNote: Consider implementing soft deletion in production\nsystems to maintain audit trails.\n\n# Arguments\n* `db` - Database connection pool\n* `user_id` - Path parameter containing the user ID\n* `config` - Application configuration\n\n# Returns\nHTTP response with success message or not-found error","operationId":"delete_user","parameters":[{"name":"id","in":"path","required":true,"schema":{"type":"integer","format":"int32"},"example":1}],"responses":{"200":{"description":"User account deleted successfully"},"404":{"description":"No user found with the specified ID"},"500":{"description":"Database connection error or execution failure"}},"security":[{"bearer_auth":[]}]}}},"components":{"schemas":{"NewRolePermission":{"type":"object","description":"Data needed to create a new role permission mapping\n\nUsed for inserting new role-permission associations into the database.","required":["role","permission"],"properties":{"permission":{"type":"string","description":"Permission to be granted to the role","example":"read"},"role":{"type":"string","description":"Role identifier to be granted a permission","example":"admin"}}},"NewUser":{"type":"object","description":"Data for creating a new user account","required":["email","hash_password","activated","firstname","lastname"],"properties":{"activated":{"type":"boolean","description":"Whether the account should be initially active","example":true},"email":{"type":"string","description":"Email address (used for login)","example":"user@example.com"},"firstname":{"type":"string","description":"User's first name","example":"John"},"hash_password":{"type":"string","description":"Plain-text password (will be hashed)","example":"password123"},"lastname":{"type":"string","description":"User's last name","example":"Doe"}}},"NewUserPermission":{"type":"object","description":"Data for creating a new user permission assignment","required":["user_id","permission"],"properties":{"permission":{"type":"string","description":"Permission to grant","example":"read"},"user_id":{"type":"integer","format":"int32","description":"ID of the user to grant permission to","example":1}}},"NewUserRole":{"type":"object","description":"Data for creating a new user role assignment","required":["user_id","role"],"properties":{"role":{"type":"string","description":"Role to assign","example":"admin"},"user_id":{"type":"integer","format":"int32","description":"ID of the user to assign the role to","example":1}}},"RolePermission":{"type":"object","description":"Role permission record from the database\n\nRepresents a mapping between a role and a permission in the system.\nEach record grants a specific permission to a specific role.","required":["role","permission","created_at"],"properties":{"created_at":{"type":"string","format":"date-time","description":"When this role-permission mapping was created"},"permission":{"type":"string","description":"Permission identifier (e.g., \"read\", \"write\")","example":"read"},"role":{"type":"string","description":"Role identifier (e.g., \"admin\", \"editor\")","example":"admin"}}},"UpdateUser":{"type":"object","description":"Data for updating an existing user account\n\nAll fields are optional to support partial updates.","properties":{"activated":{"type":"boolean","description":"New account activation status","example":false,"nullable":true},"email":{"type":"string","description":"New email address","example":"updated@example.com","nullable":true},"firstname":{"type":"string","description":"New first name","example":"Johnny","nullable":true},"hash_password":{"type":"string","description":"New plain-text password (will be hashed)","example":"newpassword123","nullable":true},"lastname":{"type":"string","description":"New last name","example":"Doesmith","nullable":true}}},"User":{"type":"object","description":"User account record\n\nContains user profile information and authentication details.","required":["id","email","hash_password","firstname","lastname","activated","created_at","updated_at"],"properties":{"activated":{"type":"boolean","description":"Whether the account is active","example":true},"created_at":{"type":"string","format":"date-time","description":"When the account was created"},"email":{"type":"string","description":"Email address (used for login)","example":"user@example.com"},"firstname":{"type":"string","description":"User's first name","example":"John"},"hash_password":{"type":"string","description":"Password hash using Argon2id","example":"$argon2id$v=19$m=4096,t=3,p=1$..."},"id":{"type":"integer","format":"int32","description":"Unique identifier","example":1},"lastname":{"type":"string","description":"User's last name","example":"Doe"},"updated_at":{"type":"string","format":"date-time","description":"When the account was last updated"}}},"UserPermission":{"type":"object","description":"User permission assignment record\n\nRepresents a direct permission assignment to a specific user,\ngranting them access independent of their role assignments.","required":["user_id","permission","created_at"],"properties":{"created_at":{"type":"string","format":"date-time","description":"When this permission was granted"},"permission":{"type":"string","description":"Permission being granted","example":"read"},"user_id":{"type":"integer","format":"int32","description":"ID of the user receiving the permission","example":1}}},"UserRole":{"type":"object","description":"User role assignment record\n\nRepresents the assignment of a role to a specific user,\ngranting them all permissions associated with that role.","required":["user_id","role","created_at"],"properties":{"created_at":{"type":"string","format":"date-time","description":"When this role was assigned"},"role":{"type":"string","description":"Role being assigned","example":"admin"},"user_id":{"type":"integer","format":"int32","description":"ID of the user receiving the role","example":1}}}},"securitySchemes":{"bearer_auth":{"type":"http","scheme":"bearer","bearerFormat":"JWT"}}},"security":[{"bearer_auth":[]}],"tags":[{"name":"Users","description":"User account management including creation, updates, and deletion"}]}