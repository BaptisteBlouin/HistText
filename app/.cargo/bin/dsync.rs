// Updated .cargo/bin/dsync.rs
use std::collections::HashMap;
use std::path::PathBuf;

pub fn main() {
    let dir = env!("CARGO_MANIFEST_DIR");
    println!("Running dsync (generating model code from `backend/schema.rs`)");
    let schema_file = PathBuf::from_iter([dir, "backend/schema.rs"]);
    let models_dir = PathBuf::from_iter([dir, "backend/models"]);
    
    ensure_schema_is_generated(&schema_file);
    
    // Create table options map with &str keys
    let mut table_options = HashMap::new();
    // plugin_storage
    table_options.insert("attachment_blobs", dsync::TableOptions::default().ignore());
    table_options.insert("attachments", dsync::TableOptions::default().ignore());
    // plugin_auth
    table_options.insert("role_permissions", dsync::TableOptions::default().ignore());
    table_options.insert("user_permissions", dsync::TableOptions::default().ignore());
    table_options.insert("user_roles", dsync::TableOptions::default().ignore());
    table_options.insert("user_sessions", dsync::TableOptions::default().ignore());
    table_options.insert("users", dsync::TableOptions::default().ignore());
    table_options.insert("user_oauth2_links", dsync::TableOptions::default().ignore());
    // plugin_tasks
    table_options.insert("fang_tasks", dsync::TableOptions::default().ignore());
    table_options.insert("solr_database_info", dsync::TableOptions::default().ignore());
    
    // Based on the latest errors
    let config = dsync::GenerationConfig {
        connection_type: "crate::server::connection::Connection".to_string(),
        options: dsync::GenerationConfigOpts {
            // Use boolean for once_connection_type as expected
            once_connection_type: true,
            // Add the missing fields
            once_common_structs: true,
            readonly_prefixes: Vec::new(),
            readonly_suffixes: Vec::new(),
            default_table_options: dsync::TableOptions::default()
                .tsync()
                .autogenerated_columns(vec!["id", "created_at", "updated_at"]),
            table_options,
            model_path: "crate::models::".to_string(),
            schema_path: "crate::schema::".to_string(),
        },
    };
    
    let _ = dsync::generate_files(
        schema_file.as_path(),
        models_dir.as_path(),
        config,
    );
}

pub fn ensure_schema_is_generated(schema_file: &PathBuf) {
    // check that the diesel schema file is not empty
    let content = std::fs::read_to_string(schema_file).unwrap_or_default();
    if content.trim().is_empty() {
        println!("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
        println!(" The diesel schema file is not generated yet.");
        println!(" If this is a new project, did you forget\n the `diesel database setup` step?");
        println!("=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=");
        panic!("`backend/schema.rs` is empty or not present");
    }
}